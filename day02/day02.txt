팀프로젝트
  1. 팀원간의 약속을 잘 지킬 수 있는 사람만 참여
  2. 4명 4명 4명 5명(참여하고자 하는 사람 인원 파악 후 진행)

개인포트폴리오사이트
  모두 진행

변수
  값을 재사용 하기 위해서

  변수의 해석방법
  = 대입연산자 왼쪽에 쓰여있으면 + 선언되어있으면 값을 저장하는 저장공간
  그 외의 경우에는 저장되어있는 값으로 해석

변수의 선언
  ES6 이전(ES5 이하 버전)
  var 변수이름;
  ex)
    var abc; // --> abc라는 변수를 메모리에 할당한다

  
  ES6 이상
  var 변수이름;
  let 변수이름;
  ex) 
    let abc; // --> abc라는 변수를 메모리에 할당한다
  
  const 변수이름; // 값을 저장할 건데, 최초로 저장된 값이 수정되지 않도록
                  // 만들겠다

  ex)
    const abc;
    abc = 로그인한사람의나이; // 평생 값이 변할 수 없다
                             // readonly로 쓰겠다

var vs let  
  var를 사용하면 변수를 재선언 하는 것이 가능하다(재할당도 가능)
  let을 사용하면 변수를 재선언 하지 못한다

let vs const 
  let을 사용하면 재할당(변수에 처음들어있던 값이 아닌 다른값을 넣는 행위) 가능
  const를 사용하면 재할당 불가능(재선언은 당연히 불가)

연산자
  1. 피연산자값의 갯수와 타입
  2. 동작
  3. 연산결과 값과 타입


산술연산자
  1. 피연산자갯수 2개
  2. 동작(각각의 산술 연산을 수행)
  3. 연산결과 ??
  +
    피연산자 중 문자열이 어느 한쪽에라도 있으면 결과는 문자열
    undefined와 같이 연산이 불가능한 값끼리 연산되면
    결과는 NaN 이라는 값이 나온다

  -
    숫자모양의문자열(숫자) - 숫자모양의문자열(숫자) --> number
    숫자로바꿀수없는 문자열이 어느 한쪽에라도 포함되어있다면 NaN
  *
    숫자모양의문자열(숫자) * 숫자모양의문자열(숫자) --> number
    숫자로바꿀수없는 문자열이 어느 한쪽에라도 포함되어있다면 NaN
  /
    숫자모양의문자열(숫자) / 숫자모양의문자열(숫자) --> number
    숫자로바꿀수없는 문자열이 어느 한쪽에라도 포함되어있다면 NaN
    0 혹은 '0' 으로 나누면 음의무한대 -Infinity 혹은 Infinity가
    결과로 나온다
  % : 나머지연산자 나누었을 때 나머지를 계산한다
    10 % 3 --> 1
    숫자모양의문자열(숫자) % 숫자모양의문자열(숫자) --> number
    숫자로바꿀수없는 문자열이 어느 한쪽에라도 포함되어있다면 NaN

자료형(타입)
  number : 10, -5, 3.1, Infinity, NaN ,.......
  string : '', 'dfds', '10', ......
  undefined : undefined
  boolean : true , false

관계(비교)연산자
  1.피연산자 두개 
  a > b : a 가 b 보다 크니? 결과는 맞으면 true 틀리면 false
  a < b : a 가 b 보다 작니? 결과는 맞으면 true 틀리면 false 
  a >= b : a가 b 보다 크거나 같니? 결과는 맞으면 true 틀리면 false 
  a <= b : a가 b 보다 작거나 같니? 결과는 맞으면 true 틀리면 false 
  a == b : a랑 b랑 같니? 결과는 맞으면 true 틀리면 false 
  a != b : a랑 b랑 다르니? 결과는 맞으면 true 틀리면 false 
  a === b: a랑 b랑 같니(타입도)? 결과는 맞으면 true 틀리면 false 
  a !== b: a랑 b랑 다르니(타입도)? 결과는 맞으면 true 틀리면 false

논리연산자
  a && b : and연산(논리곱, 교집합)
          a 그리고 b 둘다 true 라면 결과가 true 아니면 false 
  a || b : or연산(논리합, 합집합)
          a 혹은 b 둘 중 하나라도 true가 있다면 결과는 true 아니면 false
  !a : 피연산자하나 not연산(논리부정, 여집합)
        a가 true면 결과는 false, a가 false면 결과는 true

num = !(10 % 2 == 0 && 10 - 3 >= 3 - 5) || true
num = true

우선순위에 따라서 차근차근 수행
  최우선 연산자 ()
  단항연산자    !
  산술연산자    * / %  + -
  쉬프트연산자  
  관계연산자    > < >= <= == != === !===
논리연산자      && ||
  삼항연산자    
  대입연산자    =

삼항(조건)연산자


